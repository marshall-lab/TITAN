name: CI

on: [push]

jobs:

  standards:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python for linting, formatting, type checking
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Cache python modules
      uses: actions/cache@v1
      env:
        cache-name: cache-python-modules
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('dev_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install cython
        pip install -r dev_requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 titan --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 titan --count --exit-zero --max-complexity=12 --max-line-length=88 --statistics
    - name: Check code formatting with black
      run: black . --check
    - name: Static Type Checking with mypy
      run: mypy titan

  unit:
    runs-on: ubuntu-latest
    container:
      image: brownccv/titanenv

    steps:
    - uses: actions/checkout@v1
    - name: Unit Test with pytest
      run: |
        pypy3 -m pytest -m unit --cov=titan --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unit

  integration-deterministic:
    runs-on: ubuntu-latest
    container:
      image: brownccv/titanenv

    steps:
    - uses: actions/checkout@v1
    - name: Integration Test with pytest
      run: |
        pypy3 -m pytest -m integration_deterministic --cov=titan --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: integration

  integration-stochastic:
    runs-on: ubuntu-latest
    container:
      image: brownccv/titanenv

    steps:
    - uses: actions/checkout@v1
    - name: Integration Test with pytest
      run: |
        pypy3 -m pytest -m integration_stochastic --cov=titan --cov-report=xml
    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: integration

  trigger_rebuild:
    runs-on: ubuntu-latest
    needs: [unit, integration-deterministic]

    steps:
    - name: Trigger Param App re-build
      run: |
        curl -XPOST -H "Authorization: token ${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json"  -H "Content-Type: application/json" https://api.github.com/repos/marshall-lab/titan-params-app/dispatches --data '{"event_type": "build_application"}'
